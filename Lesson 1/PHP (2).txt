	__  ____  ____  ____  ____  ____  ____  ____  ____  ____  ____  __

#.htaccess в Apache
	Options Indexes FollowSymLinks
	DirectoryIndex Index.php
	php_flag register_long_arrays off
	__  ____  ____  ____  ____  ____  ____  ____  ____  ____  ____  __

#НАСТРОЙКА

	php_flag short_open_tag on							//Короткие тэги

	LoadModule php5_module "c:/php/php5apache2_2.dll"	//Прикручиваем PHP к Apache
	AddType application/x-httpd-php .phtml .php

	Options Indexes FollowSymLinks MultiViews
	AllowOverride all


#ФУНКЦИИ

	$								//переменная
	echo, print						//Вывод
	\n								//переход на новую строку
	\t								//табуляция
	\r								//возврат каретки
	\								//экранирует спец символы в двойных кавычках
	<<<LABEL-LABEL;					//Выводит все символы
	
	__  ____  ____  ____  ____  ____  ____  ____  ____  ____  ____  __
	
	echo "BMW - {$bmw[model]} - {$bmw[speed]}";				//Экранирование переменной
	${beer}s												//Экранирование переменной

	$str = 'Hello, world!';		
	// Получение первого символа строки
	$first = $str{0};				// H
	// Получение третьего символа строки
	$third = $str{2};// l
	// Получение последнего символа строки
	$len = strlen($str);// 13
	$pos = $len – 1;// 12
	$last = $str{$pos};// !
	$last = $str{strlen($str)-1};//!


	$beer = 'Baltika';	
	echo $beer{0}					//Вывод первого символа
	$a += $b						//Тоже, что и $a = $a + $b
	.								//Склеивает операторы
	
	__  ____  ____  ____  ____  ____  ____  ____  ____  ____  ____  __
	
	unset(имя_переменной)			//Удаляет переменную
	isset(имя_переменной)			//Сообщает существует ли переменная
	empty(имя_переменной)			//Сообщает присвоено ли переменной значение
	gettype(имя_переменной)			//Сообщает тип переменной
	settype(имя_переменной, "тип")	//Конвертирует переменную в другой тип
	(тип)имя_переменной;			//(str)$beer
	
	//////////////////////////////////////////////	
	Типы переменных
	//////////////////////////////////////////////
	
	NULL
	integer							//Число
	string
	double							//float
	boolean
	
	__  ____  ____  ____  ____  ____  ____  ____  ____  ____  ____  __

	
#ОПЕРАТОРЫ СРАВНЕНИЯ
	
	$a == $b						//Сравнения
	$a === $b						//Жесткое сравнения
	$a !== $b						//Не равно
	$a !=== $b						//Жесткое не равно
	<, >,  <=,  >=
	
	__  ____  ____  ____  ____  ____  ____  ____  ____  ____  ____  __

	
#ОПЕРАТОРЫ ЛОГИЧЕСКИЕ

	$a and $b						//И
	$a or $b						//Или
	$a && $b						//И
	$a || $b						//Или
	!$a 							//Если а не TRUE
	
	
	__  ____  ____  ____  ____  ____  ____  ____  ____  ____  ____  __
	
	
#КОНСТРУКЦИИ

	--IF -- ELSEIF -- ELSE--
	
	if ($age >= 18 && $age <= 59)		//Условие
	{
	
	}
	или
	if ():
		echo
	endif;
	
	elseif								//Продолжение условия
	else								//
	
	echo $a==2 ? 'two' : 'not two'; 	//Тернарный оператор
	
	__  ____  ____  ____  ____  ____  ____  ____  ____  ____  ____  __
	
	--SWITCH--
	
	switch($a){							//Перечисление
		case 0:							//Вложение
			echo "Ноль";
			break;						//Разрыв перечисления
		case 1:
			echo "Один";
			break;
		default:							//По умолчанию
			echo "Много";	
	}
	
	ini_get ('имя_директива')					//Получение значения из директивы
	
	__  ____  ____  ____  ____  ____  ____  ____  ____  ____  ____  __

	
#МАССИВЫ

	$peremennaya [индекс]				//МАССИВ
	$peremennaya ["name"]				//Ассоциативный массив	
	
	$peremennaya = array(
	"индекс" => значение_1,
	15 => значение_2 
	и тд)								//МАССИВ
	
	count($peremennaya)					//Функция подсчета ячеек массива
	print_r($peremennaya)				//Вывод ячеек массива
	var_dump($peremennaya)				//Вывод ячеек массива более подробно
	
	
	$cars = array(
	
		"BMW" => "БМВ",
		"Toyota" => "Тойота",
		"Bently" => "Бэнтли"
	);	
	
	echo current($cars);				//Выводит текущее значение_БМВ
	echo next($cars);				//Выводит следующее значение_Тойота
	echo current($cars);				//Выводит текущее значение_Тойота
	echo prev($cars);				//Выводит следующее значение_БМВ
	echo end($cars);				//Выводит последнее значение_Бэнтли
	echo reset($cars);				//Выводит последнее значение_БМВ
	echo key($cars);				//Выводит ключ текущего значения
	
	__  ____  ____  ____  ____  ____  ____  ____  ____  ____  ____  __
	
	
#КОНСТАНТЫ

	define('NAME',100,true);				//Константа, true если регистро независима
	defined('NAME');					//Проверка константы

	__  ____  ____  ____  ____  ____  ____  ____  ____  ____  ____  __
	
#ИНКРЕМЕНТ И ДЕКРЕМЕНТ

	++									//ИНКРЕМЕНТ Увеличивает переменную на единицу
	--									//ДЕКРЕМЕНТ Уменьшает переменную на единицу
	
	--PRE инкремент/декремент--
	
	++$a								//Увеличивает $a на единицу и возвращает
										значение $a	
	
	--$a									//Уменьшает $a на единицу и возвращает
										значение $a
	
	--ПРИМЕР--
	
	$a = 1;
	echo "Вывод числа: " . ++$a;			//Вывод числа: 2
	echo "Вывод числа: " . $a;			//Вывод числа: 2
	$a += 1; echo "Вывод числа: $a"; 
	
	
	--POST инкремент/декремент--

	$a++								//Возвращает значение $a, а затем 
										увеличивает $a на единицу и 
	
	$a--									//Возвращает значение $a, а затем 
										уменьшает $a на единицу и 
										
	--ПРИМЕР--
	
	$a = 1;
	echo "Вывод числа: " . $a++;			//Вывод числа: 1
	echo "Вывод числа: " . $a;			//Вывод числа: 2
	echo "Вывод числа: $a"; $a += 1;
	
__  ____  ____  ____  ____  ____  ____  ____  ____  ____  ____  __
	
#ЦИКЛЫ

	--FOR--
	
	for (часть А; часть В; часть С){	//цикл for
	инструкция 1;
	инструкция 2;	
	}

	часть А					//Счетчик
	часть В					//Условие, if
	часть С					//Шаг

	$sum = 1;
	for ($i=1; $i<=30; $i++){
	
	}
	
	--WHILE--
	
	часть А							//переменная
	while (условие_часть В){		//цикл while
	инструкция 1(шаг_часть С);
	инструкция 2;
	}
	
	$i = 1;
	while ($i<50) {	
	echo $i."<br>";
	$i+=2;
	
	if ($i==19)
	break;					//Остановка цикла
	
	
	if ($i==19)
	continue;				//Продолжение цикла
							вывод всего кроме условия
	
	
	--DO...  WHILE--
	
	do{	
	
	инструкция 1;
	инструкция 2;
	
	}while(условие)
	
	$i = 1;
	$sum = 1;
	do{
		$sum += 3;
		echo $sum;
	}while($i<45)
	
	
	--FOREACH--								//Цикл для работы с массивами
	
	
	foreach(массив as $переменная){			//Выводит переменные
		echo $переменная;
	}
	
	foreach(массив as $пер1=>$пер2){		//Выводит переменные с ключами
		echo $пер1.$пер2;
	}
	
	$beer [] = 'Karlsberg';	
	$beer [] = 'Baltika';	
	$beer [] = 123;	
	$beer [] = true;
	
	foreach($beer as $a=>$b){
		echo $a." = ".$b;
	}

__  ____  ____  ____  ____  ____  ____  ____  ____  ____  ____  __

	
#ПОЛЬЗОВАТЕЛЬСКИЕ ФУНКЦИИ

	//////////////////////////////////////////////
	Функция - программный блок, который может
	многократно выполняться в любом месте сценария
	//////////////////////////////////////////////
	
	func_num_args()							//Выводит кол-во аргументов
	func_get_args()							//Выводит массив аргументов
	get_defined_functions()					//Выводит все доступные функции
	print_r (get_defined_functions());		
	
	Если в функцию передается ...
	//Array => кол-во ячеек
	//NULL => 0
	//String, Int,... => 1
	
	if(function_exists("sayHello")){}		//Проверка, есть ли функция

	function sayHello(){
		echo "<h1>Hello, world!</h1>";		//Описание функции
	}
	sayHello();								//Вызов функции
	sayHello();
	sayHello();

	if(function_exists("sayHello")){}		//Проверка, есть ли функция
	
	//////////////////////////////////////////////
	
	function sayHello($name="Guest",$h=3){				//Аргумент по умолчанию
		echo "<h$h>Hello, $name!</h$h>";		
	}
	sayHello("John", 1);						//Вызов функции, вариант 1
	
	$n = "Mike";								//Вызов функции, вариант 2
	sayHello($n);
	
	$func = "sayHello";							//Вызов функции, вариант 3
	$func();
	
	//////////////////////////////////////////////	
	
	--ФУНКЦИИ: ОБЛАСТИ ВИДИМОСТИ--

	$a = 1;								//Глобальная область видимости
	function Test(){
		echo $a;						//Локальная область видимости
	}
	Test()								//Не выведет ничего
	
	$a = 1; $b = 2;
	
	function Sum(){
		global $a, $b;
		$b += $a;
	}
	Sum();
	echo $b;							//Выведет 3
	
	другой вариант
	
	function Sum(){
		$GLOBALS["b"] = $GLOBALS["a"] +
		$GLOBALS["b"];
	}
	
	//////////////////////////////////////////////	
	
	--ФУНКЦИИ: СТАТИЧЕСКИЕ ПЕРЕМЕННЫЕ--
	
	function Test(){
		$a = 0;
		echo $a++;
	}
	Test();				//Выведет 0
	Test();				//Выведет 0
	Test();				//Выведет 0
	
	function Test(){
		static $a = 0;
		echo $a++;
	}
	Test();				//Выведет 0
	Test();				//Выведет 1
	Test();				//Выведет 2
	
	function getSum($n1, $n2){	
	return $n1 + $n2;			//Возвращает результат в функцию
	}
	echo getSum(5,4);
	
	//////////////////////////////////////////////	
	
	--ФУНКЦИИ: РЕКУРСИВНЫЙ ВЫЗОВ ФУНКЦИЙ--	
	
	function factorial($n)
	{
	if ($n == 0) return 1;
	return $n * factorial($n-1);
	}
	$result = factorial(5)
	echo "5! = " . $result;
	
	//////////////////////////////////////////////	
	

	
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
#ФУНКЦИИ ДЛЯ ЕЖЕДНЕВНОГО ИСПОЛЬЗОВАНИЯ
'''''''''''''''''''''''''''''''''''''''

	//////////////////////////////////////////////	
	--ФУНКЦИИ ДЛЯ РАБОТЫ С ПЕРЕМЕННЫМИ--	
	//////////////////////////////////////////////	

	
	Нижеперечисленные функции возвращают TRUE или FALSE
	в зависимости от того, соответствует ли выражение
	указанному типу
	
	is_array(expression)
	is_bool(expression)
	is_float(expression)
	is_integer(expression)
	is_numeric(expression)
	is_string(expression)
	is_null(expression)
	intval(expression [, int base])			//Возвращает целочисленное значение аргумента.
	floatval(expression)					//Возвращает вещественное значение аргумента.

	//////////////////////////////////////////////		
	--МАТЕМАТИЧЕСКИЕ ФУНКЦИИ--	
	//////////////////////////////////////////////	

	
	max										//Возвращает наибольшее число из заданых.
	acos									//Возвращает значение арккосинуса значения.
	cos										//Возвращает косинус числа в радианах.
	min										//Возвращает наименьшее число из заданых.
	decbin									//Возвращает двоичное представление	целого числа.
	log										//Возвращает натуральный логарифм значения.
	pi										//Возвращает приблизительное число пи.
	rad2deg									//Возвращает в градусах значение аргумента заданного в радианах.
	round									//Возвращает округленное до ближайшего целого числа значение заданное аргументом.
	sqrt									//Извлечение квадратного корня из числа.
	rand									//Возвращает число, лежащее между двумя необязательными аргументами включительно.
	
	//////////////////////////////////////////////		
	--ФУНКЦИИ ОБРАБОТКИ СТРОК--	
	//////////////////////////////////////////////		
	
	
	addslashes								//Экранирует спецсимволы в строке.
	stripslashes							//Разэкранирует спецсимволы в строке.
	explode									//Разбивает строку на подстроки.
	htmlentities							//Преобразует символы в соответствующие	HTML сущности.
	trim									//Удаляет пробелы из начала и конца строки.
	str_replace								//Заменяет строку поиска на строку замены.
	strip_tags								//Удаляет HTML и PHP тэги из строки.
	strlen									//Возвращает длину строки.
	strpos									//Возвращает позицию первого вхождения подстроки.
	strstr									//Находит первое вхождение подстроки.
	substr									//Возвращает подстроку
	
	//////////////////////////////////////////////		
	--ФУНКЦИИ ДЛЯ РАБОТЫ С МАССИВАМИ--	
	//////////////////////////////////////////////		
	
	
	array_pop								//Извлечь последний элемент массива.
	array_shift								//Извлечь первый элемент массива.
	array_rand								//Выбрать одно или несколько случайных значений из массива.
	array_reverse							//Возвращает массив с элементами в обратном порядке.
	count									//Посчитать количество элементов массива или количество свойств объекта.
	in_array								//Проверить, присутствует ли в массиве значение.
	array_key_exists						//Проверить, присутствует ли в массиве ключ.
	implode									//Объединить элементы массива в строку.
	
	
	//////////////////////////////////////////////		
	--ФУНКЦИИ ДАТЫ И ВРЕМЕНИ--	
	//////////////////////////////////////////////	
	
	date()									//передается шаблон	
	time()									//Выводит временную метку
	mktime()								//Возвращает метку времени Unix для заданной даты
	
	$today = getdate([int timestamp]);		//массив
	$today["seconds"]						//Секунды От 0 до 59
	"minutes"								//Минуты От 0 до 59
	"hours"									//Часы От 0 до 23
	"mday"									//Порядковый номер дня месяца От 1 до 31
	"wday"									//Порядковый номер дня. 0 (воскресенье)
	"mon"									//Порядковый номер месяца От 1 до 12
	"year"									//Порядковый номер года, 4 цифры
	"yday"									//Порядковый номер дня в году От 0 до 365
	"weekday"								//Полное наименование дня недели От Sunday до Saturday
	"month"									//Полное наименование месяца, От January до 	December
	0										//Временная отметка
	
	echo date("h:I A l F dS, Y")
	//04:01 PM Tuesday December 17th, 2006
	
	d 										//День месяца, 2 цифры с ведущими нулями от 01
	D 										//Наименование дня недели, 3 символа от Mon
	F										//Полное наименование месяца, например January
	G										//Часы в 24-часовом формате без ведущих нулей От 0
	H										//Часы в 24-часовом формате с ведущими нулями
	i										//Минуты с ведущими нулями
	j										//День месяца без ведущих нулей От 1
	l										//Полное наименование дня недели, например Sunday
	m 										//Порядковый номер месяца с ведущими нулями От 01
	M 										//Наименование месяца, 3 символа От Jan до Dec
	n 										//Порядковый номер месяца без ведущих нулей От 1
	r										//Дата в формате: Thu, 21 Dec 2000 16:01:07 +0200
	s										//Секунды с ведущими нулями От 00 до 59
	w										//Порядковый номер дня недели От 0 (воскресенье)
	W 										//Порядковый номер недели года
	Y 										//Порядковый номер года, 4 цифры
	z 										//Порядковый номер дня в году (нумерация с 0)
	
	
	//////////////////////////////////////////////		
	--ПРЕДОПРЕДЕЛЕННЫЕ КОНСТАНТЫ--	
	//////////////////////////////////////////////	

	
	__LINE__ 								//Текущая строка в файле.
	__FILE__								//Полный путь и имя текущего файла.
	__FUNCTION__							//Имя функции.
	
	function foo(){
		echo __FUNCTION__;
	}
	foo();									//foo
	
	PHP_EXTENSION_DIR						//Директория расширений РНР
	PHP_OS 									//Операционная система
	PHP_VERSION 							//Версия РНР
	PHP_CONFIG_FILE_PATH					//Где лежит php.ini
	
	
	//////////////////////////////////////////////		
	--ПРЕДОПРЕДЕЛЕННЫЕ ПЕРЕМЕННЫЕ--	
	//////////////////////////////////////////////	
	
	$GLOBALS //Массив, содержащий все переменные
	из глобального диапазона
	$_ENV //Массив переменных среды,
	существовавших при запуске сценария
	$_COOKIE //Массив файлов cookie отправленных с
	браузера на сервер
	$_GET //Массив, содержащий значения всех
	полей, переданных методом GET
	$_POST //Массив, содержащий значения всех полей,
	переданных методом POST
	$_FILES //Массив, содержащий всю информацию о
	загруженных файлах
	$_REQUEST //Массив, содержащий переменные
	_GET, _POST, _COOKIES и _FILES
	$_SESSION //Массив переменных размещенных во
	встроенных сеансах РНР
	
		
	//////////////////////////////////////////////		
	--ПРЕДОПРЕДЕЛЕННЫЕ ПЕРЕМЕННЫЕ: _SERVER--	
	//////////////////////////////////////////////	
	
	
	DOCUMENT_ROOT
	GATEWAY_INTERFACE
	HTTP_ACCEPT
	HTTP_ACCEPT_CHARSET
	HTTP_ACCEPT_ENCODING
	HTTP_ACCEPT_LANGUAGE
	HTTP_CONNECTION
	HTTP_HOST
	HTTP_REFERER
	HTTP_USER_AGENT
	PATH_TRANSLATED
	PHP_AUTH_PW
	PHP_AUTH_TYPE
	PHP_AUTH_USER
	PHP_SELF
	QUERY_STRING
	REMOTE_ADDR
	REMOTE_PORT
	REQUEST_METHOD
	REQUEST_URI
	SCRIPT_FILENAME
	SCRIPT_NAME
	SERVER_ADMIN
	SERVER_NAME
	SERVER_PORT
	SERVER_PROTOCOL
	SERVER_SIGNATURE
	SERVER_SOFTWARE
	
	$_SERVER["SERVER_SOFTWARE"];
	
		
	//////////////////////////////////////////////		
	--ФУНКЦИИ ЭМУЛЯЦИИ SSI--	
	//////////////////////////////////////////////	
	
	
	include(); 								//
	include_once(); 						//
	require();  							//
	require_once(); 						//